// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/.api/threads': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** @description List all threads. */
        get: operations['ThreadService_listThreads']
        put?: never
        /** @description Create a new thread. */
        post: operations['ThreadService_createThread']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/.api/threads/{thread_id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** @description Get a single thread. */
        get: operations['ThreadService_getThread']
        put?: never
        post?: never
        /** @description Delete a thread. */
        delete: operations['ThreadService_deleteThread']
        options?: never
        head?: never
        /** @description Update a thread. */
        patch: operations['ThreadService_updateThread']
        trace?: never
    }
}
export type webhooks = Record<string, never>
export interface components {
    schemas: {
        Links: {
            self: string
            first: string | null
            last: string | null
            next: string | null
            prev: string | null
        }

        /** @description A chat thread. */
        Thread: {
            /**
             * Format: int32
             * @description The unique ID for this thread.
             */
            id: number
            /** @description The title of the thread (if any). */
            title: string | null
            /** @description The user who created this thread. */
            creator: components['schemas']['User']
            /** @description The thread visibility settings. */
            visibility: components['schemas']['ThreadVisibility']
            /** @description JSON data for the thread. */
            data?: unknown
            /** @description Raw text content of messages in the thread. This is derived from the `data` field and is used
             *     as a fallback when the server does not know how to parse `data` (for data in older schemas,
             *     for example). */
            messages_raw_text?: string | null
            /**
             * Format: date-time
             * @description When this thread was created.
             */
            created_at: string
            /**
             * Format: date-time
             * @description When this thread was last updated.
             */
            updated_at: string
        }
        /** @description Initial data to create a thread. */
        ThreadCreate: {
            /** @description The title of the thread. */
            title?: string | null
            /** @description The thread visibility settings. */
            visibility?: components['schemas']['ThreadVisibility'] | null
            /** @description JSON data for the thread. */
            data?: unknown
            /** @description The raw text content of messages in the thread. */
            messages_raw_text?: string | null
        }
        ThreadListResponse: {
            links?: components['schemas']['Links'] | null
            threads: components['schemas']['Thread'][]
        }
        /** @description An update to a thread. */
        ThreadUpdate: {
            /** @description The new title of the thread. */
            title?: string | null
            /** @description The new thread visibility settings. */
            visibility?: components['schemas']['ThreadVisibilityUpdate'] | null
            /** @description The new JSON data for the thread. */
            data?: unknown
            /** @description The new raw text content of messages in the thread. */
            messages_raw_text?: string | null
        }
        /** @description Visibility settings for a thread. */
        ThreadVisibility: {
            /** @description Whether this thread is accessible to any authenticated user on the instance who has the link. */
            link: boolean
        }
        /** @description Visibility settings for a thread. */
        ThreadVisibilityUpdate: {
            /** @description Whether this thread is accessible to any authenticated user on the instance who has the link. */
            link?: boolean
        }
        User: {
            id: string
            /** Format: int64 */
            database_id: number
            username: string
            avatar_url: string
            display_name: string
            url: string
            emails: components['schemas']['Email'][]
        }
    }
    responses: never
    parameters: never
    requestBodies: never
    headers: never
    pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
    ThreadService_listThreads: {
        parameters: {
            query?: {
                'filter[creator_user_id]'?: number
                'page[number]'?: number
                'page[size]'?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['ThreadListResponse']
                }
            }
        }
    }
    ThreadService_createThread: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThreadCreate']
            }
        }
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['Thread']
                }
            }
        }
    }
    ThreadService_getThread: {
        parameters: {
            query?: never
            header?: never
            path: {
                thread_id: string
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['Thread']
                }
            }
        }
    }
    ThreadService_deleteThread: {
        parameters: {
            query?: never
            header?: never
            path: {
                thread_id: string
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    ThreadService_updateThread: {
        parameters: {
            query?: never
            header?: never
            path: {
                thread_id: string
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThreadUpdate']
            }
        }
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['Thread']
                }
            }
        }
    }
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P]
}
