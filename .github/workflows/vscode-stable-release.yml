name: vscode-stable-release

on:
  push:
    tags:
      - vscode-v*

jobs:
  release:
    if: github.repository == 'sourcegraph/cody'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write # for publishing the release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .tool-versions
      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # SECURITY: pin third-party action hashes
        with:
          run_install: true
      - name: get release version
        id: release_version
        run: |
          TAGGED_VERSION="${GITHUB_REF/refs\/tags\/vscode-v/}"

          if [[ ! "${TAGGED_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Invalid version tag '${TAGGED_VERSION}'"
            exit 1
          fi

          echo "EXT_VERSION=${TAGGED_VERSION}" >> $GITHUB_ENV
          WRITTEN_VERSION="$(cat vscode/package.json | jq '.version' -r)"

          if [[ "${TAGGED_VERSION}" != "${WRITTEN_VERSION}" ]]; then
            echo "Release tag and version in vscode/package.json do not match: '${TAGGED_VERSION}' vs. '${WRITTEN_VERSION}'"
            exit 1
          fi
      - run: pnpm build
      - run: pnpm run test
      - run: xvfb-run -a pnpm -C vscode run test:integration
      - run: xvfb-run -a pnpm -C vscode run test:e2e
        env:
          NO_LOG_TESTING_TELEMETRY_CALLS: true
      - run: CODY_RELEASE_TYPE=stable pnpm -C vscode run release
        if: github.repository == 'sourcegraph/cody'
        env:
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
          VSCODE_OPENVSX_TOKEN: ${{ secrets.VSCODE_OPENVSX_TOKEN }}
      - run: pnpm -C vscode run github-changelog
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Cody for VS Code ${{ env.EXT_VERSION }}
          draft: false
          body_path: vscode/GITHUB_CHANGELOG.md
      - name: upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./vscode/dist/cody.vsix
          asset_name: cody-vscode-${{ env.EXT_VERSION }}.vsix
          asset_content_type: application/zip
      - name: Generate changelog
        env:
          DEVX_SERVICE_GH_TOKEN: ${{ secrets.DEVX_SERVICE_GH_TOKEN }}
          GH_REPO: "sourcegraph/cody"
          CHANGELOG_CATEGORY_ACCEPTLIST: "added,changed,fixed"
          CHANGELOG_SKIP_NO_CHANGELOG: "true"
          CHANGELOG_COMPACT: "true"
          EXT_VERSION: ${{ env.EXT_VERSION }}
        run: |
          # Get previous tag's commit
          PREV_TAG=$( git tag --sort=-v:refname | grep '^vscode-v' |  head -n 2 | tail -n 1)
          export RELEASE_LATEST_RELEASE=$(git rev-parse $PREV_TAG)

          # Get current release commit
          export RELEASE_LATEST_COMMIT=$GITHUB_SHA

          # Download and run changelog generator
          tagName=$(gh release -R sourcegraph/devx-service list --exclude-drafts --exclude-pre-releases -L 1 --json tagName -q '.[] | .tagName')
          gh release -R sourcegraph/devx-service download ${tagName} --pattern changelog
          chmod +x changelog

          ./changelog write \
          --output-file="raw-changelog.md" \
          --releaseregistry.version=$EXT_VERSION

          cat vscode/CHANGELOG.md >> raw-changelog.md
          mv raw-changelog.md vscode/CHANGELOG.md
          git checkout -b release/vscode-v$EXT_VERSION
          git add vscode/CHANGELOG.md
          git commit -m "Automated release and changelog for VS code Cody"
          git push -u origin release/vscode-v$EXT_VERSION
          gh pr create \
            --title "VS Code: Release v$EXT_VERSION" \
            --body "Automated release and changelog for VS code Cody" \
            --base main --head release/vscode-v$EXT_VERSION
      - name: Register on Releaseregistry
        env:
          EXT_VERSION: ${{ env.EXT_VERSION }}
          RELEASE_REGISTRY_TOKEN: ${{ secrets.RELEASE_REGISTRY_TOKEN }}
        run: |
          echo "Registering internal cody-vscode $EXT_VERSION release on release registry"
          body=$(wget --content-on-error -O- --header="Content-Type: application/json" --header="Authorization: ${RELEASE_REGISTRY_TOKEN}" --post-data '{
              "name": "cody-vscode",
              "version": "'${EXT_VERSION}'",
              "git_sha": "'${GITHUB_SHA}'"
            }' "https://releaseregistry.sourcegraph.com/v1/releases")
          exit_code=$?

          if [ $exit_code != 0 ]; then
            echo "‚ùå Failed to create release in release registry, got:"
            echo "--- raw body ---"
            echo $body
            echo "--- raw body ---"
            exit $exit_code
          else
            echo "Release created, see:"
            echo $body
          fi
