name: vscode-generate-changelog

on:
  workflow_dispatch:
    inputs:
      editor:
        description: 'Select editor for changelog generation'
        required: true
        type: choice
        default: 'VS Code'
        options:
          - VS Code
          - JetBrains      
      version:
        description: |
          The version to be released, this will be used as the header of the changelog

          Ex - 1.60.0
        required: true
        type: string
      release_tag:
        description: |
          'Optional: Generate changelog since a specific release. ex - vscode-v1.58'
        
          If no release_tag is specified, the changelog will be generated from the latest release tag.
        required: false
        type: string
jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Configure git
        run: |
          git config --global user.name 'sourcegraph-bot'
          git config --global user.email 'bot@sourcegraph.com'
          git fetch --tags origin
      - name: Download changelog
        env:
          GH_TOKEN: ${{ secrets.DEVX_SERVICE_GH_TOKEN }}
        run: |
          # Download and run changelog generator
          tagName=$(gh release -R sourcegraph/devx-service list --exclude-drafts --exclude-pre-releases -L 1 --json tagName -q '.[] | .tagName')
          gh release -R sourcegraph/devx-service download ${tagName} --pattern changelog
          chmod +x changelog
      - name: Generate changelog
        env:
          GH_TOKEN: ${{ secrets.DEVX_SERVICE_GH_TOKEN }}
          GH_REPO: "sourcegraph/cody"
          CHANGELOG_SKIP_NO_CHANGELOG: "true"
          CHANGELOG_COMPACT: "true"
          VERSION: ${{ github.event.inputs.version }}
          RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          EDITOR: ${{ github.event.inputs.editor }}
        run: |
          set +x
          export CHANGELOG_SKIP_NO_CHANGELOG="false"
          export CHANGELOG_COMPACT="false"
          
          # Use provided release tag if available, otherwise get previous tag
          if [ -n "$RELEASE_TAG" ]; then
            export RELEASE_LATEST_RELEASE=$(git rev-parse $RELEASE_TAG)
          else
            # Get previous tag's commit based on editor selection
            if [ "$EDITOR" = "VS Code" ]; then
              PREV_TAG=$(git tag --sort=-v:refname | grep '^vscode-v' | head -n 2 | tail -n 1)
            else
              PREV_TAG=$(git tag --sort=-v:refname | grep '^jb-v' | head -n 2 | tail -n 1)
            fi
            export RELEASE_LATEST_RELEASE=$(git rev-parse $PREV_TAG)
          fi

          # Set editor-specific variables
          if [ "$EDITOR" = "VS Code" ]; then
            CHANGELOG_PATH="vscode/CHANGELOG.md"
            PR_BRANCH="release/vscode-v%s"
          else
            # TODO change this once we have a proper JetBrains changelog
            CHANGELOG_PATH="vscode/CHANGELOG.md"
            PR_BRANCH="release/jb-v%s"
          fi

          # Get current release commit
          export RELEASE_LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Latest Commit: $RELEASE_LATEST_COMMIT"
          echo "Latest Release: $RELEASE_LATEST_RELEASE"
          echo $VERSION
          ./changelog update-as-pr \
            --github.repo=$GH_REPO \
            --output.repo.base="main" \
            --output.repo=$GH_REPO \
            --output.pr.branch="$PR_BRANCH" \
            --output.pr.title="Changelog for v%s" \
            --output.pr.body="Automated release and changelog for ${EDITOR} Cody v%s" \
            --output.changelog="$CHANGELOG_PATH" \
            --output.changelog.marker='<!--- {/_ CHANGELOG_START _/} -->' \
            --releaseregistry.version=${VERSION}      
      - name: Update version
        if: github.event.inputs.editor == 'VS Code'
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          set +x
          # git checkout -b version-update/$VERSION
          sed -i 's/"version": "[0-9]\+\.[0-9]\+\.[0-9]\+"/"version": "'$VERSION'"/' vscode/package.json
          # This will get tagged along with the changelog PR
          git add vscode/package.json
          git pull
          git checkout release/vscode-v$VERSION
          git commit -m "Update version to $VERSION"
          git push
