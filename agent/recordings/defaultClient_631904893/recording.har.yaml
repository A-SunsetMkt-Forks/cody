log:
  _recordingName: defaultClient
  creator:
    comment: persister:cody-fs
    name: Polly.JS
    version: 6.0.6
  entries:
    - _id: d4386b3185568d4fde90fec06ce87772
      _order: 0
      cache: {}
      request:
        bodySize: 1413
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - name: user-agent
            value: defaultClient / v1
          - name: host
            value: sourcegraph.com
        headersSize: 263
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >
                  Codebase context from file path src/nested.ts: function
                  outer() {
                      
                      return function inner() {
                      }

                      
                  }



                  function different_scope() {

                  }
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: "Explain what the selected code does in simple terms. Assume the audience
                  is a beginner programmer who has just learned the language
                  features and basic syntax. Focus on explaining: 1) The purpose
                  of the code 2) What input(s) it takes 3) What output(s) it
                  produces 4) How it achieves its purpose through the logic and
                  algorithm. 5) Any important logic flows or data
                  transformations happening. Use simple language a beginner
                  could understand. Include enough detail to give a full picture
                  of what the code aims to accomplish without getting too
                  technical. Format the explanation in coherent paragraphs,
                  using proper punctuation and grammar. Write the explanation
                  assuming no prior context about the code is known. Do not make
                  assumptions about variables or functions not shown in the
                  shared code. Start the answer with the name of the code that
                  is being explained."
              - speaker: assistant
            model: anthropic/claude-2.0
            temperature: 0
            topK: -1
            topP: -1
        queryString: []
        url: https://sourcegraph.com/.api/completions/stream
      response:
        bodySize: 170524
        content:
          mimeType: text/event-stream
          size: 170524
          text: >+
            event: completion

            data: {"completion":" outer","stopReason":""}


            event: completion

            data: {"completion":" outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called,","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). ","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nest","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(),","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever,","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary,","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner()","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isol","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and clo","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and clos","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and closures","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and closures in","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and closures in JavaScript","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and closures in JavaScript.","stopReason":""}


            event: completion

            data: {"completion":" outer() is a function that returns another function called inner().\n\nouter() doesn't take any inputs. It defines an inner function called inner() and returns that function.\n\nWhen outer() is called, it returns the inner() function. inner() also doesn't take any inputs or return any outputs. It is just defined inside outer().\n\nThe purpose of this code is to demonstrate nested functions in JavaScript. outer() is the outer function and inner() is a function defined inside of outer(). \n\nBy nesting inner() inside outer(), inner() gains access to the scope of outer(). This allows inner() to access variables and parameters defined in the outer() function.\n\nHowever, in this example inner() does not actually use any variables from outer(). It is just defined inside outer() and returned by it.\n\nThe different_scope() function is defined globally and is unrelated to outer() and inner(). It demonstrates that inner() is only scoped within outer() and cannot access different_scope().\n\nIn summary, this code defines a nested inner() function within outer() and returns it. This allows inner() access to outer()'s scope while isolating it from the global scope. The purpose is to demonstrate function scoping and closures in JavaScript.","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:10 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1289
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:08.095Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 0af734d27e9cdbb178bf5ef98f44b717
      _order: 0
      cache: {}
      request:
        bodySize: 194
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "194"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 351
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CodyConfigFeaturesResponse {
                  site {
                      codyConfigFeatures {
                          chat
                          autoComplete
                          commands
                        }
                  }
              }
            variables: {}
        queryString:
          - name: CodyConfigFeaturesResponse
            value: null
        url: https://sourcegraph.com/.api/graphql?CodyConfigFeaturesResponse
      response:
        bodySize: 140
        content:
          encoding: base64
          mimeType: application/json
          size: 140
          text: "[\"H4sIAAAAAAAAAySLQQrAIAzA/tLzXuBV2D+K7TZhtUPrYUj/PpynkEAGEBpCGNCy8WRSe\
            qOWI587o/XK7a8XGgSrnTfAbhpVnpvnsVpSESzUlru7fwAAAP//AwCKjSZ9WgAAAA==\
            \"]"
          textDecoded:
            data:
              site:
                codyConfigFeatures:
                  autoComplete: true
                  chat: true
                  commands: true
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:08 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.938Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: ff8e76416fe7a94f4d43989458d75539
      _order: 0
      cache: {}
      request:
        bodySize: 318
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "318"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 356
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          chatModel
                          chatModelMaxTokens
                          fastChatModel
                          fastChatModelMaxTokens
                          completionModel
                          completionModelMaxTokens
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:06.715Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 47157f2f2e0c16266aee838871dd2a4e
      _order: 0
      cache: {}
      request:
        bodySize: 155
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "155"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 356
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          provider
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:06.716Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: a0e2fe1e0c47c58ae06d2ebbeab9b502
      _order: 0
      cache: {}
      request:
        bodySize: 318
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "318"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 356
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          chatModel
                          chatModelMaxTokens
                          fastChatModel
                          fastChatModelMaxTokens
                          completionModel
                          completionModelMaxTokens
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 212
        content:
          encoding: base64
          mimeType: application/json
          size: 212
          text: "[\"H4sIAAAAAAAAA4zOsQqDMBDG8Xe5WW10a1ZXs/UFjiTW0PROzAktkncvulgylE4HH39+3\
            AYOBUFvkIL4/Vp272EwPdMY7uuCEpiOfUIx7HwEDUgyLTwHe7ERV+frrlFQnYnB140f\
            nhLotlNKVTBikv6XECgJktQtFPGXdT0oy885+v2tv7AiL7icc/4AAAD//wMAqZjCzQQ\
            BAAA=\"]"
          textDecoded:
            data:
              site:
                codyLLMConfiguration:
                  chatModel: anthropic/claude-2.0
                  chatModelMaxTokens: 12000
                  completionModel: anthropic/claude-instant-1
                  completionModelMaxTokens: 9000
                  fastChatModel: anthropic/claude-instant-1
                  fastChatModelMaxTokens: 9000
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.316Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: e9fb3191c59454141548208108fd5b6a
      _order: 0
      cache: {}
      request:
        bodySize: 155
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "155"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 356
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          provider
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 128
        content:
          encoding: base64
          mimeType: application/json
          size: 128
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdHJ+SmVPj6+zvl5aZnppUWJJZn5eSDxgqL8s\
            syU1CIlK6Xi/NKi5NT0osSCDKXa2tpaAAAAAP//AwAfFAXARQAAAA==\"]"
          textDecoded:
            data:
              site:
                codyLLMConfiguration:
                  provider: sourcegraph
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.317Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 6c6658e8e48edbf3202b358137824728
      _order: 0
      cache: {}
      request:
        bodySize: 227
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "227"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 336
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:06.865Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: de3eb7ed43e888f3f6bd06efce11bb37
      _order: 0
      cache: {}
      request:
        bodySize: 227
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "227"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 336
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 236
        content:
          encoding: base64
          mimeType: application/json
          size: 236
          text: "[\"H4sIAAAAAAAAAzSMywrCMBQF/+Wso+C2ILhxp10ILW4v6W2akke5SZRS8u/iazcDw2wYK\
            BOaDbqIcMhdYnmrHdCgv7dOz/HQzvp5NccjFCZKPYsdLQ9nT9ahyVJYYbBpcbS25BlN\
            KM4plMQSPo7oaCyymF3mlG0wUKAHZZLudvnni1hPsv6uG/gLSLGIZiO0TCfDVlKKYa+\
            jR621vgAAAP//AwA9RRnIwAAAAA==\"]"
          textDecoded:
            data:
              currentUser:
                avatarURL: null
                displayName: null
                hasVerifiedEmail: true
                id: VXNlcjo1NjcwMg==
                primaryEmail:
                  email: sourcegraph@geirsson.com
                username: olafurpg-testing
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.455Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 32948df7ef84dfa9b6f6cd817ebcc4ad
      _order: 0
      cache: {}
      request:
        bodySize: 115
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "115"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 350
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUserCodyProEnabled {
                  currentUser {
                      codyProEnabled
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUserCodyProEnabled
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUserCodyProEnabled
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.006Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: aa8eb07df5adc86d8ace82712a86d917
      _order: 0
      cache: {}
      request:
        bodySize: 115
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "115"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 350
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUserCodyProEnabled {
                  currentUser {
                      codyProEnabled
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUserCodyProEnabled
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUserCodyProEnabled
      response:
        bodySize: 100
        content:
          encoding: base64
          mimeType: application/json
          size: 100
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlZKLi0qSs0rCS1OLQJz81MqA4ryXfMSk3JSU5SsSopKU\
            2trawEAAAD//wMAqqwCpjAAAAA=\"]"
          textDecoded:
            data:
              currentUser:
                codyProEnabled: true
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.618Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 3491ca3790d189d16ffa81c733ea4540
      _order: 0
      cache: {}
      request:
        bodySize: 177
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: x-sourcegraph-actor-anonymous-uid
            value: defaultClientabcde1234
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "177"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 319
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-tracing
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 38
        content:
          mimeType: application/json
          size: 38
          text: "{\"data\":{\"evaluateFeatureFlag\":false}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:06.416Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 04852935795bdcd952694fe3cded0f44
      _order: 0
      cache: {}
      request:
        bodySize: 177
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "177"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-tracing
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.150Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 6faa6bd1dc7a994983e717e26ceff5d0
      _order: 0
      cache: {}
      request:
        bodySize: 177
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "177"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-tracing
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 38
        content:
          mimeType: application/json
          size: 38
          text: "{\"data\":{\"evaluateFeatureFlag\":false}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.780Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d9288b37d0a7c7fde6255fd8c926eeae
      _order: 0
      cache: {}
      request:
        bodySize: 187
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "187"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-context-bfg-mixed
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 37
        content:
          mimeType: application/json
          size: 37
          text: "{\"data\":{\"evaluateFeatureFlag\":null}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "37"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.782Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 1b25456d6fee14915fdfd26fea753652
      _order: 0
      cache: {}
      request:
        bodySize: 192
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "192"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-new-jaccard-similarity
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 37
        content:
          mimeType: application/json
          size: 37
          text: "{\"data\":{\"evaluateFeatureFlag\":null}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "37"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.783Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 0bd36c61fc95faa99fe3eb3322088306
      _order: 0
      cache: {}
      request:
        bodySize: 199
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "199"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-dynamic-multiline-completions
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 38
        content:
          mimeType: application/json
          size: 38
          text: "{\"data\":{\"evaluateFeatureFlag\":false}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.784Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: ba61907e230f8bbc2c53f0e8c27d2d69
      _order: 0
      cache: {}
      request:
        bodySize: 180
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "180"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-hot-streak
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        bodySize: 38
        content:
          mimeType: application/json
          size: 38
          text: "{\"data\":{\"evaluateFeatureFlag\":false}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.785Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d3ad7d0472fccc5ecd8492fa8c5fae9b
      _order: 0
      cache: {}
      request:
        bodySize: 147
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: x-sourcegraph-actor-anonymous-uid
            value: defaultClientabcde1234
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 312
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://sourcegraph.com/.api/graphql?FeatureFlags
      response:
        bodySize: 195
        content:
          encoding: base64
          mimeType: application/json
          size: 195
          text: "[\"H4sIAAAAAAAAA4TMQQ7CIBRF0b38cdkAC+gmjIMf\",\"eFYj9BN4GBvSvZtONNGB83vu\
            kKhU8UPw0NSViDOUvWJOujTxpyGrZogXIiGDdXN4FquUSQ4C8awd+/QOg8XNaacFyyW\
            BcKwabuvyERdN7YeEq9JlC3dHtD/7Uu0rOO/7CwAA//8DAI8HSAHNAAAA\"]"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:06.415Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: f6d7905a604a70014ffa5eb91245f2a1
      _order: 0
      cache: {}
      request:
        bodySize: 147
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 337
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://sourcegraph.com/.api/graphql?FeatureFlags
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.156Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 07cebd611edd30e8b2cb0bb2e156a188
      _order: 0
      cache: {}
      request:
        bodySize: 147
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 337
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://sourcegraph.com/.api/graphql?FeatureFlags
      response:
        bodySize: 496
        content:
          encoding: base64
          mimeType: application/json
          size: 496
          text: "[\"H4sIAAAAAAAAA5RTQW7jMAz8i87lB/KAfmKxB1qaWERkySWpJkaQvxfOFtsWrWP0TA45n\
            BleQ2LncLgGvHLp7EjPYO+K58KjhcOfa6g8IRyCo2CC60K4zE09PIUVgnBw7bg9/W+M\
            LS3E3Vts01zgIFeOUscPxJGLfYYYWGMmqXN3stzOlMW86bINGXWOmxTe5+VlUEkPiFZ\
            XNqc7UeHqZEt1vlCWMRcZsz9kfT901ra5gAfCxFLoFSpHiezSKnHBr9RLS+VJIk29uB\
            SpoPeStGrb7FB5KCBzBU9SRxrFaShrcUe2VRdUp4ENiQrXkRIccV2466FyPX1R7Yf7d\
            oe0c4Valnm7cyhtoJlHkJ3FYyZWsK3hUY/dbce2Lwrn5v90Om2jlB1UZBI3wiUCCYmO\
            Tclhj2PCMcJMVjOOUtZvwLYFL13iicxZnbx1va/g7hnV1wAhUTeo7XmYMPRvnP7ebm8\
            AAAD//wMArGm4ovEDAAA=\"]"
          textDecoded:
            data:
              evaluatedFeatureFlags:
                - name: telemetry-export
                  value: true
                - name: cody-autocomplete-tracing
                  value: false
                - name: search-input-show-history
                  value: false
                - name: grpc
                  value: true
                - name: search-hybrid
                  value: true
                - name: contrast-compliant-syntax-highlighting
                  value: false
                - name: cody-pro
                  value: true
                - name: ab-email-verification-alert
                  value: true
                - name: cody-autocomplete-dynamic-multiline-completions
                  value: false
                - name: enable-streaming-git-blame
                  value: true
                - name: search-content-based-lang-detection
                  value: false
                - name: search-ranking
                  value: true
                - name: cody
                  value: false
                - name: search-ownership
                  value: false
                - name: blob-page-switch-areas-shortcuts
                  value: false
                - name: cody-autocomplete-hot-streak
                  value: false
                - name: rate-limits-exceeded-for-testing
                  value: false
                - name: accessible-file-tree
                  value: true
                - name: quick-start-tour-for-authenticated-users
                  value: true
                - name: search-debug
                  value: false
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:08 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.953Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: e7dde7a4a64e79d8d38fab91610fd83f
      _order: 0
      cache: {}
      request:
        bodySize: 731
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "731"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 341
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:Auth:failed
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.154Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 91ccc476387f1a8f032ca51b55cbee55
      _order: 0
      cache: {}
      request:
        bodySize: 560
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "560"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 341
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:Auth:failed
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.289Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 3929b309adc90ef8c20fa317c6eba5dd
      _order: 0
      cache: {}
      request:
        bodySize: 734
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "734"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 341
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:Auth:connected
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        bodySize: 26
        content:
          mimeType: application/json
          size: 26
          text: "{\"data\":{\"logEvent\":null}}"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:08 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1286
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.951Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: a312ee48b09cbb01bcae6d98009ff32a
      _order: 0
      cache: {}
      request:
        bodySize: 339
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "339"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 346
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: failed
                  feature: cody.auth
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.1.3
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.280Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 061e2501be3713c0265a5f461f4e0f11
      _order: 0
      cache: {}
      request:
        bodySize: 352
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "352"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 346
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: executed
                  feature: cody.command.explain
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.1.3
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:08 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:08.076Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: eb52aa179531f4dbafba4abf7bb2cac2
      _order: 0
      cache: {}
      request:
        bodySize: 342
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "342"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 346
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: connected
                  feature: cody.auth
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.1.3
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 122
        content:
          encoding: base64
          mimeType: application/json
          size: 122
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoE\",\"cYpSk/OLUlzLUvNKikH8xJzy\
            xMpiv8wcJau80pyc2traWgAAAAD//w==\",\"AwCEdn1qOgAAAA==\"]"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:08 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:08.099Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 496af979cd0ad6d436cbc26c727382dd
      _order: 0
      cache: {}
      request:
        bodySize: 144
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: x-sourcegraph-actor-anonymous-uid
            value: defaultClientabcde1234
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "144"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 310
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
              		id
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://sourcegraph.com/.api/graphql?Repository
      response:
        bodySize: 120
        content:
          encoding: base64
          mimeType: application/json
          size: 120
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+qBPEyU5SslEJzw8qTjP0KUtwtK1ND8\
            o18Q3wr/UJ8K/0dbW2VamtrAQAAAP//AwDHAhygPQAAAA==\"]"
          textDecoded:
            data:
              repository:
                id: UmVwb3NpdG9yeTo2MTMyNTMyOA==
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:06.414Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 776421913dcd06bb0ce18e1fd28ff39f
      _order: 0
      cache: {}
      request:
        bodySize: 189
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "189"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 251
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
                              id
                              embeddingExists
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://sourcegraph.com/.api/graphql?Repository
      response:
        bodySize: 151
        content:
          encoding: base64
          mimeType: application/json
          size: 151
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+q\",\"BPEyU5SslEJzw8qTjP0KUtwt\
            K1ND8o18Q3wr/UJ8K/0dbW2VdJRSc5NSU1Iy89JdKzKLS4qVrEqKSlNra2sBAAAA//8\
            DAP+HlYJUAAAA\"]"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:06.581Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d7b5aae999c4a65c99f09d6aea5986ac
      _order: 0
      cache: {}
      request:
        bodySize: 189
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "189"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 335
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
                              id
                              embeddingExists
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://sourcegraph.com/.api/graphql?Repository
      response:
        bodySize: 158
        content:
          encoding: base64
          mimeType: application/json
          size: 158
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+q\",\"BPEyU5SslEJzw8qTjP0KUtwt\
            K1ND8o18Q3wr/UJ8K/0dbW2VdJRSc5NSU1Iy89JdKzKLS4qVrEqKSlNra2sBAAAA//8=\
            \",\"AwD/h5WCVAAAAA==\"]"
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.786Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 4951fc53474aa99e643416d464c65e1e
      _order: 0
      cache: {}
      request:
        bodySize: 164
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 259
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteIdentification
      response:
        bodySize: 212
        content:
          encoding: base64
          mimeType: application/json
          size: 212
          text: "[\"H4sIAAAAAAAAAzTLsQ6CMBCA4Xe52aGFcrbMLoaRwfnuekgTA6QtgyG+u8HEf/mn74BIl\
            aA/oKSq/99v0MO47ln0mWmbH8pwgS2vcZc67lwkp62mdTnBK4ku5WdnKrPGQd/QA0cf\
            sONGdWoJLTs1HborOWNNgwZRvLcWxXfBkRFr2ASZuPUc1CIG+Jx9AQAA//8DAGHOuFq\
            gAAAA\"]"
          textDecoded:
            data:
              site:
                productSubscription:
                  license:
                    hashedKey: bd8965b2eef3a61b4e05647a401026066c88116c8594a0c10b09cfb38b9e1669
                siteID: SourcegraphWeb
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:06.392Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d8f187ac9133e9b322229e0dbf38af15
      _order: 0
      cache: {}
      request:
        bodySize: 164
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 343
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteIdentification
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:07.152Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 43b26d087292e11d965947c77f3ddea4
      _order: 0
      cache: {}
      request:
        bodySize: 164
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 343
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteIdentification
      response:
        bodySize: 212
        content:
          encoding: base64
          mimeType: application/json
          size: 212
          text: "[\"H4sIAAAAAAAAAzTLsQ6CMBCA4Xe52aGFcrbMLoaRwfnuekgTA6QtgyG+u8HEf/mn74BIl\
            aA/oKSq/99v0MO47ln0mWmbH8pwgS2vcZc67lwkp62mdTnBK4ku5WdnKrPGQd/QA0cf\
            sONGdWoJLTs1HborOWNNgwZRvLcWxXfBkRFr2ASZuPUc1CIG+Jx9AQAA//8DAGHOuFq\
            gAAAA\"]"
          textDecoded:
            data:
              site:
                productSubscription:
                  license:
                    hashedKey: bd8965b2eef3a61b4e05647a401026066c88116c8594a0c10b09cfb38b9e1669
                siteID: SourcegraphWeb
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.781Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 521ccc40108044270489f74646d341d2
      _order: 0
      cache: {}
      request:
        bodySize: 101
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_4a92106dd3be39a589d6e2d0a6e32b705744d4007d74518fdfd1dbf953176dc6
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "101"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 343
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteProductVersion {
                  site {
                      productVersion
                  }
              }
            variables: {}
        queryString:
          - name: SiteProductVersion
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteProductVersion
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:06 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1248
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-01-20T22:06:06.713Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 7f1d6672c1fe1acd794bdf0992e42e2a
      _order: 0
      cache: {}
      request:
        bodySize: 101
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_3709f5bf232c2abca4c612f0768368b57919ca6eaa470e3fd7160cbf3e8d0ec3
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "101"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 343
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteProductVersion {
                  site {
                      productVersion
                  }
              }
            variables: {}
        queryString:
          - name: SiteProductVersion
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteProductVersion
      response:
        bodySize: 136
        content:
          encoding: base64
          mimeType: application/json
          size: 136
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdEFRfkppcklYalFxZn5eUpWSkamFqYWJvFGB\
            kYmugaGuoaW8aZ6RroWKckGhinJlqYGFslKtbW1AAAAAP//AwDitCvuSQAAAA==\"]"
          textDecoded:
            data:
              site:
                productVersion: 258584_2024-01-19_5.2-8dc01dc9508c
        cookies: []
        headers:
          - name: date
            value: Sat, 20 Jan 2024 22:06:07 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1318
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-01-20T22:06:07.314Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
  pages: []
  version: "1.2"
