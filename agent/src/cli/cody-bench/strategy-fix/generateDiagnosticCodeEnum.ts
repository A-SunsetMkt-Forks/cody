import { writeFileSync } from 'node:fs'
import path from 'node:path'
import { Command } from 'commander'
import dedent from 'dedent'
import { CodePrinter } from '../../../../../vscode/src/completions/context/retrievers/tsc/CodePrinter'
import { arrayOption } from '../cli-parsers'

// Run this script:
// pnpm dlx ts-node agent/src/cli/cody-bench/generateDiagnosticCodeEnum.ts
const command = new Command()
    .description('Generates a TypeScript enum for all TypeScript diagnostic codes')
    .option(
        '-i, --url <url>',
        'url to download',
        'https://raw.githubusercontent.com/microsoft/TypeScript/main/src/compiler/diagnosticMessages.json'
    )
    .option('-o, --output <output>', 'output file', path.join(__dirname, 'DiagnosticCode.ts'))
    .option('--include <include...>', 'only generate enum members for these codes', arrayOption as any, [
        // NOTE(olafur) Feel free to add more. The full list of diagnostics has
        // 2k elements and I think it's overkill to have all of them living in
        // the Cody repo.
        '2322',
        '2339',
        '2345',
        '2559',
        '2739',
        '2740',
        '2741',
        '2769',
    ])
    .action(async (options: { url: string; output: string; include: string[] }) => {
        const response = await fetch(options.url)
        const data: any = await response.json()
        const includeCodes = new Set(options.include)
        const p = new CodePrinter({ indentationSize: 4 })
        p.line('// DO NOT EDIT')
        p.line(`// This file is generated by ${path.basename(__filename)}`)
        p.line('// Run the command below to regenerate this file')
        p.line('//  pnpm dlx ts-node agent/src/cli/cody-bench/generateDiagnosticCodeEnum.ts')
        p.line(`// Source of truth: ${options.url}`)
        p.line('export enum DiagnosticCode {')
        p.block(() => {
            for (const message of Object.keys(data)) {
                const code = data[message]?.code
                if (code && includeCodes.has(String(code))) {
                    p.line(`/** ${message} */ TS${code} = '${code}',`)
                }
            }
        })
        p.line('}')
        p.text(dedent`
        const allCodes = new Set(Object.values(DiagnosticCode) as string[])
        export function isDiagnosticCode(code?: string): code is DiagnosticCode {
            return code !== undefined && allCodes.has(code)
        }`)
        writeFileSync(options.output, p.build())
        console.log(`done: ${options.output}`)
    })
command.parse(process.argv)
