// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Document Code > commands/document (Function within a property) 1`] = `
"const foo = 42
/**
 * Starts the logging process.
 *
 * This function does some initial setup and then calls the \`recordLog()\` function to log a message to the console.
 */
export const TestLogger = {
    startLogging: () => {
        // Do some stuff

        function recordLog() {
            console.log(/* CURSOR */ 'Recording the log')
        }

        recordLog()
    },
}
"
`;

exports[`Document Code > commands/document (Kotlin class name) 1`] = `
"/**
 * Represents a greeting object.
 */
class He/* CURSOR */llo {
    fun greeting(): String {
        return "Hello, world!"
    }
}
"
`;

exports[`Document Code > commands/document (Method as part of a class) 1`] = `
"const foo = 42

export class TestClass {
    constructor(private shouldGreet: boolean) {}

    /**
     * Logs a greeting message to the console if the \`shouldGreet\` flag is true.
     */
    public functionName() {
        if (this.shouldGreet) {
            console.log(/* CURSOR */ 'Hello World!')
        }
    }
}
"
`;

exports[`Document Code > commands/document (Tree-sitter expansion) 1`] = `
"/**
 * Represents a person with a name and an age.
 */
interface Person {
    name: string
    age:/* CURSOR */ number
}
"
`;

exports[`Document Code > commands/document (nested test case) 1`] = `
"import { expect } from 'vitest'
import { it } from 'vitest'
import { describe } from 'vitest'

/**
 * Describes a test block for the example.
 */
describe('test block', () => {
    it('does 1', () => {
        expect(true).toBe(true)
    })

    it('does 2', () => {
        expect(true).toBe(true)
    })

    it('does something else', () => {
        // This line will error due to incorrect usage of \`performance.now\`
        const startTime = performance.now(/* CURSOR */)
    })
})
"
`;

exports[`Document Code > editCommands/document (basic function) 1`] = `
"/**
 * Adds two numbers and returns the result.
 * @param a - The first number to add.
 * @param b - The second number to add.
 * @returns The sum of the two input numbers.
 */
export function sum(a: number, b: number): number {
    /* CURSOR */
}
"
`;
