// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Agent > Chat > chat/submitMessage (long message) 1`] = `
"I'll create a simple Hello World function in Java for you.

\`\`\`java:src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        sayHello();
    }

    public static void sayHello() {
        System.out.println("Hello, World!");
    }
}
\`\`\`

To compile and run this Java program, use these commands:

\`\`\`bash
javac src/HelloWorld.java
\`\`\`

\`\`\`bash
java -cp src HelloWorld
\`\`\`

This code creates a clean and simple Hello World program with a dedicated function called \`sayHello()\`. The program will print "Hello, World!" when executed. The structure is organized and follows Java conventions."
`;

exports[`Agent > Chat > chat/submitMessage (short message) 1`] = `
{
  "model": "anthropic::2024-10-22::claude-3-5-sonnet-latest",
  "speaker": "assistant",
  "text": "Hi there! Great to meet you! I'm Cody, ready to help you with any coding or technical questions you have. What would you like to work on?",
}
`;

exports[`Agent > Chat > chat/submitMessage (with mock context) 1`] = `
"\`\`\`typescript:src/dog.ts
export class Dog implements Animal {
    name: string;
    isMammal = true;

    constructor(name: string) {
        this.name = name;
    }

    makeAnimalSound(): string {
        return "Woof!";
    }
}
\`\`\`"
`;

exports[`Agent > Commands > commands/explain 1`] = `
"The code you've shared is an interface definition for an \`Animal\` type in TypeScript. An interface is a blueprint for an object that defines what properties and methods an object should have.

1. The purpose of this code is to define the structure of an \`Animal\` object, including the properties it should have and the methods it should be able to execute.
2. This code does not take any inputs. It is a static definition of the \`Animal\` type.
3. This code does not produce any outputs. Instead, it serves as a contract that other parts of the codebase can use to ensure that objects they work with conform to the expected structure.
4. The \`Animal\` interface defines three properties: \`name\` of type \`string\`, \`makeAnimalSound\` of type \`function\`, and \`isMammal\` of type \`boolean\`. By defining this interface, other parts of the codebase can create objects that implement this interface and be confident that they will have these properties.
5. The \`makeAnimalSound\` method is defined with no implementation, indicating that it should be implemented by any object that conforms to this interface. This allows for polymorphism, where different objects that implement the \`Animal\` interface can have their own unique implementation of the \`makeAnimalSound\` method.

In summary, this code defines the structure of an \`Animal\` object, including its properties and methods. It does not take any inputs or produce any outputs, but instead serves as a contract for other parts of the codebase to ensure that objects they work with conform to the expected structure. The \`makeAnimalSound\` method allows for polymorphism, where different objects that implement the \`Animal\` interface can have their own unique implementation of the method."
`;

exports[`Agent > Commands > commands/smell 1`] = `
"Based on the provided code from \`src/animal.ts\`, here are some suggestions for improvement:

1. Add a type to the \`makeAnimalSound()\` method return value.

Currently, the return type of the \`makeAnimalSound()\` method is not explicitly defined. Adding a type, such as \`string\`, can help improve code readability and maintainability.

2. Add a type to the \`name\` property.

Similar to the \`makeAnimalSound()\` method, the type of the \`name\` property is not explicitly defined. Adding a type, such as \`string\`, can help improve code readability and maintainability.

3. Add a type to the \`isMammal\` property.

The type of the \`isMammal\` property is not explicitly defined. Adding a type, such as \`boolean\`, can help improve code readability and maintainability.

4. Consider adding a constructor to the \`Animal\` interface.

Adding a constructor to the \`Animal\` interface can help ensure that instances of the interface are created with the required properties.

5. Consider adding a comment to the \`Animal\` interface.

Adding a comment to the \`Animal\` interface can help improve code readability and maintainability by providing context and information about the interface.

Overall, the provided code appears to follow sound design principles. However, implementing the above suggestions can help improve code readability, maintainability, and type safety."
`;
